name: Build and Deploy on Azure
on:
  workflow_dispatch:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]


env:
  AND_OS_TOKEN: ${{ secrets.PAT_WORKFLOW }}
  ASPNETCORE_ENVIRONMENT: Release

jobs:
  build_and_deploy:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    env:
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
    services:
      azurite:
        image: mcr.microsoft.com/azure-storage/azurite
        ports:
          - 10000:10000
          - 10001:10001
          - 10002:10002
        env:
          AZURITE_ACCOUNTS: "devstoreaccount1:Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==:devstoreaccount1"
          AZURITE_BLOB_HOST: "localhost"
          AZURITE_BLOB_PORT: 10000
          AZURITE_QUEUE_HOST: "localhost"
          AZURITE_QUEUE_PORT: 10001
          AZURITE_TABLE_HOST: "localhost"
          AZURITE_TABLE_PORT: 10002
          AZURITE_BLOB_CORS: "corsRules=[{allowedOrigins:['*'],allowedMethods:['GET','PUT','POST','DELETE','OPTIONS'],allowedHeaders:['*'],exposedHeaders:['*'],maxAgeInSeconds:3600}"
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          
      - name: Run install workloads
        run: |
          dotnet workload update
          dotnet workload install aspire
        
      - name: Restore dependencies
        run: dotnet restore /p:Configuration=Release
        
      - name: Build
        run: dotnet build --no-restore -c Release
        
      - name: Test
        run: dotnet test --no-build --verbosity normal -c Release

      - name: Install azd
        uses: Azure/setup-azd@v1.0.0

      - name: Log in with Azure (Federated Credentials)
        if: ${{ env.AZURE_CLIENT_ID != '' }}
        run: |
          azd auth login `
            --client-id "$Env:AZURE_CLIENT_ID" `
            --federated-credential-provider "github" `
            --tenant-id "$Env:AZURE_TENANT_ID"
        shell: pwsh

      - name: Log in with Azure (Client Credentials)
        if: ${{ env.AZURE_CREDENTIALS != '' }}
        run: |
          $info = $Env:AZURE_CREDENTIALS | ConvertFrom-Json -AsHashtable;
          Write-Host "::add-mask::$($info.clientSecret)"
          azd auth login `
            --client-id "$($info.clientId)" `
            --client-secret "$($info.clientSecret)" `
            --tenant-id "$($info.tenantId)"
        shell: pwsh
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Provision Infrastructure
        run: azd provision --no-prompt -C ./AndOS.AppHost/
        env:
          AZD_INITIAL_ENVIRONMENT_CONFIG: ${{ secrets.AZD_INITIAL_ENVIRONMENT_CONFIG }}

      - name: Deploy Application
        run: azd deploy --no-prompt -C ./AndOS.AppHost/